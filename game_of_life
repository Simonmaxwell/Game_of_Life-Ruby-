

class Grid
  attr_reader :size_x, :size_y
  def initialize(size_x,size_y)
    @size_x = size_x
    @size_y = size_y
    @cell_grid =
        (0...size_y).map do |y|
          (0...size_x).map do |x|
            Random.rand(2)
          end
        end
  end
  def get(x,y)
    @cell_grid[y][x]
  end

  def census_value_at(x,y)
    return 0 if y < 0 || y >= @size_y || x < 0 || x >= @size_x
    @cell_grid[y][x]
  end

  def count_neighbors(x,y)
    census_total = 0
    (y-1..y+1).each do |ny|
      (x-1..x+1).each do |nx|
        census_total += census_value_at(nx,ny)
      end
    end
    census_total - census_value_at(x,y)
  end

  def alive_or_not(x,y)
    if @cell_grid[x][y]
      count_neighbors(x,y) >= 2 && count_neighbors(x,y) <= 3
    else
      count_neighbors(x,y) == 3
    end

  end

  def life_goes_on
    (0...size_y).map do |y|
      (0...size_x).map do |x|
        alive_or_not(x,y)
        end
      end
  end

  def next_generation
    @cell_grid = life_goes_on
  end

end

def report(cell_grid)
  (0...cell_grid.size_y).each do |y|
    (0...cell_grid.size_x).each do |x|
      if cell_grid.get(x,y) == 1 then
        print 'O '
      else
        print '* '
      end
    end
    puts
  end
end

cell_grid = Grid.new(15,15)
report(cell_grid)

